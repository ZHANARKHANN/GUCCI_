pipeline {
    agent any

    triggers {
        // 02:00 –ü–Ω‚Äì–ü—Ç
        cron('0 2 * * 1-5')
    }

    tools {
        gradle 'Gradle' // –∏–º—è –∏–∑ Global Tool Configuration
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'kaniet', url: 'https://github.com/kaniet-mukaev/Gucci.git'
            }
        }

        stage('Run Smoke Tests') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh './gradlew clean smokeTest --continue'
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh './gradlew allureReport'
                }
            }
        }

        stage('Download Allure Notifications Jar') {
            steps {
                dir('..') {
                    sh '''
                        FILE=allure-notifications-4.8.0.jar
                        if [ ! -f "$FILE" ]; then
                          wget https://github.com/qa-guru/allure-notifications/releases/download/4.8.0/allure-notifications-4.8.0.jar
                        fi
                    '''
                }
            }
        }

        stage('Send Telegram Notification') {
            steps {
                // —à–ª—ë—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ TG
                sh '''
                    java -DconfigFile=notifications/config.json \
                         -jar ../allure-notifications-4.8.0.jar
                '''
            }
        }

        stage('Send Slack Notification (Webhook)') {
            steps {
                // —á–∏—Ç–∞–µ–º URL –∏–∑ —Ñ–∞–π–ª–∞ –≤–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è; –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
                sh '''#!/usr/bin/env bash
                  set -euo pipefail

                  SLACK_WEBHOOK_URL="$(cat /etc/jenkins-slack/webhook.url)"

                  # –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                  REPORT_URL="${BUILD_URL}allure"
                  IMAGE_URL="${BUILD_URL}artifact/build/reports/allure-report/allureReport/widgets/summary.png"

                  # JSON –≥—Ä—É–∑–∏–º —á–µ—Ä–µ–∑ here-doc, —á—Ç–æ–±—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–≤—ã—á–∫–∏
                  read -r -d "" PAYLOAD <<'JSON'
{
  "attachments": [
    {
      "fallback": "Allure Report",
      "color": "#36a64f",
      "title": "Allure Report",
      "title_link": "REPORT_URL_PLACEHOLDER",
      "text": "Smoke Tests –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç –Ω–∏–∂–µ üëá",
      "image_url": "IMAGE_URL_PLACEHOLDER"
    }
  ]
}
JSON

                  # –ü–æ–¥—Å—Ç–∞–≤–∏–º URLs –≤–Ω—É—Ç—Ä—å payload
                  PAYLOAD="${PAYLOAD/REPORT_URL_PLACEHOLDER/${REPORT_URL}}"
                  PAYLOAD="${PAYLOAD/IMAGE_URL_PLACEHOLDER/${IMAGE_URL}}"

                  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º. –í –ª–æ–≥–∞—Ö –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ $SLACK_WEBHOOK_URL, –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π URL
                  curl -sSf -X POST -H 'Content-type: application/json' \
                       --data "$PAYLOAD" \
                       "$SLACK_WEBHOOK_URL" >/dev/null || {
                    echo "Slack webhook send failed (text fallback)..."
                    # –§–æ–ª–±–µ–∫: —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
                    curl -sS -X POST -H 'Content-type: application/json' \
                         --data "{\"text\":\"üìä Allure Report: ${REPORT_URL}\"}" \
                         "$SLACK_WEBHOOK_URL" >/dev/null || true
                  }
                '''
            }
        }
    }

    post {
        always {
            echo "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ Allure –æ—Ç—á—ë—Ç—ã"
            junit 'build/test-results/smokeTest/*.xml'
            archiveArtifacts artifacts: 'build/allure-results/**', fingerprint: true
            archiveArtifacts artifacts: 'build/reports/allure-report/**', fingerprint: true
        }
    }
}
