pipeline {
    agent any

    triggers {
        // 02:00 –ü–Ω‚Äì–ü—Ç
        cron('0 2 * * 1-5')
    }

    tools {
        gradle 'Gradle' // –∏–º—è –∏–∑ Global Tool Configuration
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'kaniet', url: 'https://github.com/kaniet-mukaev/Gucci.git'
            }
        }

        stage('Run Smoke Tests') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh './gradlew clean smokeTest --continue'
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh './gradlew allureReport'
                }
            }
        }

        stage('Download Allure Notifications Jar') {
            steps {
                dir('..') {
                    sh '''
                        FILE=allure-notifications-4.8.0.jar
                        if [ ! -f "$FILE" ]; then
                          wget https://github.com/qa-guru/allure-notifications/releases/download/4.8.0/allure-notifications-4.8.0.jar
                        fi
                    '''
                }
            }
        }

        stage('Send Telegram Notification') {
            steps {
                // —à–ª—ë—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ TG (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç notifications/config.json)
                sh '''
                    java -DconfigFile=notifications/config.json \
                         -jar ../allure-notifications-4.8.0.jar
                '''
            }
        }

        stage('Send Slack Notification (Webhook)') {
            steps {
                // –•—Ä–∞–Ω–∏–º Slack webhook –≤ Jenkins Credentials:
                // Manage Jenkins ‚Üí Credentials ‚Üí Global ‚Üí Add ‚Üí Secret text ‚Üí ID: slack-webhook
                withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_WEBHOOK')]) {
                    sh '''#!/usr/bin/env bash
                      set -euo pipefail

                      REPORT_URL="${BUILD_URL}"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á—ë—Ç–∞-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
                      IMAGE_URL="${BUILD_URL}artifact/build/reports/allure-report/allureReport/widgets/summary.png"

                      # –°–æ–±–∏—Ä–∞–µ–º JSON —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Å—Å—ã–ª–∫–∞–º–∏ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ shell —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ heredoc –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
                      PAYLOAD=$(cat <<JSON
{
  "attachments": [
    {
      "fallback": "Allure Report",
      "color": "#36a64f",
      "title": "Allure Report",
      "title_link": "${REPORT_URL}",
      "text": "Smoke Tests –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°—Å—ã–ª–∫–∞ –Ω–∏–∂–µ üëá",
      "image_url": "${IMAGE_URL}"
    }
  ]
}
JSON
)

                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º (–∑–Ω–∞—á–µ–Ω–∏–µ SLACK_WEBHOOK –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—è—Ö Jenkins)
                      curl -sSf -H 'Content-type: application/json' \
                           --data "$PAYLOAD" \
                           "$SLACK_WEBHOOK" >/dev/null || {
                        echo "Slack webhook send failed, trying text fallback..."
                        curl -sS -H 'Content-type: application/json' \
                             --data "{\"text\":\"üìä Allure Report: ${REPORT_URL}\"}" \
                             "$SLACK_WEBHOOK" >/dev/null || true
                      }
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ Allure –æ—Ç—á—ë—Ç—ã"
            junit 'build/test-results/smokeTest/*.xml'
            archiveArtifacts artifacts: 'build/allure-results/**', fingerprint: true
            archiveArtifacts artifacts: 'build/reports/allure-report/**', fingerprint: true
        }
    }
}
